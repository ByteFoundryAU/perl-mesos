%module{Net::Mesos};
#include <SchedulerDriver.hpp>
#include <NetMesosUtils.hpp>
#include <string>
#include <vector>


%name{Net::Mesos::SchedulerDriver} class mesos::perl::SchedulerDriver
{

%{

static void
xs_init(SV* self, std::string framework, std::string master, std::string credential = std::string())
    PPCODE:
        if (SvROK(self) && SvTYPE(SvRV(self)) == SVt_PVHV) {
            mesos::perl::SchedulerDriver* driver;
            if (credential.length()) {
                driver = new mesos::perl::SchedulerDriver(toMsg<FrameworkInfo>(framework), master, toMsg<Credential>(credential));
            } else {
                driver = new mesos::perl::SchedulerDriver(toMsg<FrameworkInfo>(framework), master);
            }
            sv_magic(SvRV(self), Nullsv, PERL_MAGIC_ext,
                             (const char*) driver, 0);
        }

mesos::perl::MesosChannel*
mesos::perl::SchedulerDriver::_channel()
    CODE:
        RETVAL = THIS->channel_.get();
    OUTPUT:
        RETVAL

%}

Status start()
    %code{%
        RETVAL = THIS->start();
    %};

Status stop(bool failover = false)
    %code{%
        RETVAL = THIS->stop(failover);
    %};

Status abort()
    %code{%
        RETVAL = THIS->abort();
    %};

Status requestResources(std::vector< std::string > requests)
    %code{%
        RETVAL = THIS->requestResources(toMsg<Request>(requests));
    %};

Status launchTasks(std::vector< std::string > offerIds, std::vector< std::string > tasks, std::string filters = std::string())
    %code{%
        if (filters.length()) {
            RETVAL = THIS->launchTasks(toMsg<OfferID>(offerIds), toMsg<TaskInfo>(tasks), toMsg<Filters>(filters));
        } else {
            RETVAL = THIS->launchTasks(toMsg<OfferID>(offerIds), toMsg<TaskInfo>(tasks));
        }
    %};

Status launchTask(std::string offerId, std::vector< std::string > tasks, std::string filters = std::string())
    %code{%
        if (filters.length()) {
            RETVAL = THIS->launchTask(toMsg<OfferID>(offerId), toMsg<TaskInfo>(tasks), toMsg<Filters>(filters));
        } else {
            RETVAL = THIS->launchTask(toMsg<OfferID>(offerId), toMsg<TaskInfo>(tasks));
        }
    %};

Status killTask(std::string taskId)
    %code{%
        RETVAL = THIS->killTask(toMsg<TaskID>(taskId));
    %};

Status declineOffer(std::string offerId, std::string filters = std::string())
    %code{%
        if (filters.length()) {
            RETVAL = THIS->declineOffer(toMsg<OfferID>(offerId), toMsg<Filters>(filters));
        } else {
            RETVAL = THIS->declineOffer(toMsg<OfferID>(offerId));
        }
    %};

Status reviveOffers()
    %code{%
        RETVAL = THIS->reviveOffers();
    %};

Status sendFrameworkMessage(std::string executorId, std::string slaveId, std::string data)
    %code{%
        RETVAL = THIS->sendFrameworkMessage(toMsg<ExecutorID>(executorId), toMsg<SlaveID>(slaveId), data);
    %};

Status reconcileTasks(std::vector< std::string > statuses)
    %code{%
        RETVAL = THIS->reconcileTasks(toMsg<TaskStatus>(statuses));
    %};

Status status()
    %code{% RETVAL = THIS->status_; %};

};


