%module{Net::Mesos};
#include <MesosChannel.hpp>
#include <NetMesosXSUtils.hpp>


%name{Net::Mesos::Channel} class mesos::perl::MesosChannel
{

%{

static void
xs_init(SV* self)
    PPCODE:
        if (SvROK(self) && SvTYPE(SvRV(self)) == SVt_PVGV) {
            mesos::perl::SharedChannel* channel = new mesos::perl::SharedChannel(new mesos::perl::MesosChannel);
            sv_magic(SvRV(self), Nullsv, PERL_MAGIC_ext,
                             (const char*) channel, 0);
        }

static void
mesos::perl::MesosChannel::new(...)
    PPCODE:
        char* package = SvPV_nolen(ST(0));
        mesos::perl::SharedChannel* channel = new mesos::perl::SharedChannel(new mesos::perl::MesosChannel);
        HV* stash = gv_stashpv(package, GV_ADDWARN);
        SV* glob = (SV*) newGVgen(package);
        GvIOp(glob) = newIO();
        IoIFP(GvIOp(glob)) = PerlIO_importFILE(channel->get()->in_, "r");
        sv_magic(glob, Nullsv, PERL_MAGIC_ext,
                         (const char*) channel, 0);
        ST(0) = sv_bless(sv_2mortal(newRV_noinc(glob)), stash);
        XSRETURN(1);

mesos::perl::MesosCommand
mesos::perl::MesosChannel::recv()
    CODE:
        if (!THIS->pending_->size()) {
            if (GIMME_V == G_ARRAY) {
                XSRETURN_EMPTY;
            } else {
                XSRETURN_UNDEF;
            }
        }
        RETVAL = THIS->recv();
    OUTPUT:
        RETVAL

void
mesos::perl::MesosChannel::send(mesos::perl::MesosCommand command)
    PPCODE:
        THIS->send(command);
        XSRETURN_YES;
%}

};
