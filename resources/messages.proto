

import "mesos.proto";

package mesos.internal;



message Task {
  required string name = 1;
  required TaskID task_id = 2;
  required FrameworkID framework_id = 3;
  optional ExecutorID executor_id = 4;
  required SlaveID slave_id = 5;
  required TaskState state = 6;
  repeated Resource resources = 7;
  repeated TaskStatus statuses = 8;
}

message RoleInfo {
  required string name = 1;
  optional double weight = 2 [default = 1];
}


message StatusUpdate {
  required FrameworkID framework_id = 1;
  optional ExecutorID executor_id = 2;
  optional SlaveID slave_id = 3;
  required TaskStatus status = 4;
  required double timestamp = 5;
  required bytes uuid = 6;
}


message StatusUpdateRecord {
  enum Type {
    UPDATE = 0;
    ACK = 1;
  }
  required Type type = 1;
  optional StatusUpdate update = 2;
  optional bytes uuid = 3;
}


message SubmitSchedulerRequest
{
  required string name = 1;
}


message SubmitSchedulerResponse
{
  required bool okay = 1;
}


message ExecutorToFrameworkMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required bytes data = 4;
}


message FrameworkToExecutorMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required bytes data = 4;
}


message RegisterFrameworkMessage {
  required FrameworkInfo framework = 1;
}


message ReregisterFrameworkMessage {
  required FrameworkInfo framework = 2;
  required bool failover = 3;
}


message FrameworkRegisteredMessage {
  required FrameworkID framework_id = 1;
  required MasterInfo master_info = 2;
}

message FrameworkReregisteredMessage {
  required FrameworkID framework_id = 1;
  required MasterInfo master_info = 2;
}

message UnregisterFrameworkMessage {
  required FrameworkID framework_id = 1;
}


message DeactivateFrameworkMessage {
  required FrameworkID framework_id = 1;
}


message ResourceRequestMessage {
  required FrameworkID framework_id = 1;
  repeated Request requests = 2;
}


message ResourceOffersMessage {
  repeated Offer offers = 1;
  repeated string pids = 2;
}


message LaunchTasksMessage {
  required FrameworkID framework_id = 1;
  repeated TaskInfo tasks = 3;
  required Filters filters = 5;
  repeated OfferID offer_ids = 6;
}


message RescindResourceOfferMessage {
  required OfferID offer_id = 1;
}


message ReviveOffersMessage {
  required FrameworkID framework_id = 1;
}


message RunTaskMessage {
  required FrameworkID framework_id = 1;
  required FrameworkInfo framework = 2;
  required string pid = 3;
  required TaskInfo task = 4;
}


message KillTaskMessage {
      required FrameworkID framework_id = 1;
  required TaskID task_id = 2;
}


message StatusUpdateMessage {
  required StatusUpdate update = 1;
  optional string pid = 2;
}


message StatusUpdateAcknowledgementMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required TaskID task_id = 3;
  required bytes uuid = 4;
}


message LostSlaveMessage {
  required SlaveID slave_id = 1;
}


message ReconcileTasksMessage {
  required FrameworkID framework_id = 1;
  repeated TaskStatus statuses = 2; }


message FrameworkErrorMessage {
  required string message = 2;
}


message RegisterSlaveMessage {
  required SlaveInfo slave = 1;
}


message ReregisterSlaveMessage {
      required SlaveID slave_id = 1;
  required SlaveInfo slave = 2;
  repeated ExecutorInfo executor_infos = 4;
  repeated Task tasks = 3;
  repeated Archive.Framework completed_frameworks = 5;
}


message SlaveRegisteredMessage {
  required SlaveID slave_id = 1;
}


message SlaveReregisteredMessage {
  required SlaveID slave_id = 1;
}


message UnregisterSlaveMessage {
  required SlaveID slave_id = 1;
}


message HeartbeatMessage {
  required SlaveID slave_id = 1;
}


message ShutdownFrameworkMessage {
  required FrameworkID framework_id = 1;
}


message ShutdownExecutorMessage {}


message UpdateFrameworkMessage {
  required FrameworkID framework_id = 1;
  required string pid = 2;
}


message RegisterExecutorMessage {
  required FrameworkID framework_id = 1;
  required ExecutorID executor_id = 2;
}


message ExecutorRegisteredMessage {
  required ExecutorInfo executor_info = 2;
  required FrameworkID framework_id = 3;
  required FrameworkInfo framework_info = 4;
  required SlaveID slave_id = 5;
  required SlaveInfo slave_info = 6;
}


message ExecutorReregisteredMessage {
  required SlaveID slave_id = 1;
  required SlaveInfo slave_info = 2;
}


message ExitedExecutorMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required int32 status = 4;
}


message ReconnectExecutorMessage {
  required SlaveID slave_id = 1;
}


message ReregisterExecutorMessage {
  required ExecutorID executor_id = 1;
  required FrameworkID framework_id = 2;
  repeated TaskInfo tasks = 3;
  repeated StatusUpdate updates = 4;
}


message RegisterProjdMessage {
  required string project = 1;
}


message ProjdReadyMessage {
  required string project = 1;
}


message ProjdUpdateResourcesMessage {
  optional Parameters parameters = 1;
}


message FrameworkExpiredMessage {
  required FrameworkID framework_id = 1;
}


message ShutdownMessage {
  optional string message = 1;
}


message AuthenticateMessage {
  required string pid = 1; }


message AuthenticationMechanismsMessage {
  repeated string mechanisms = 1; }


message AuthenticationStartMessage {
  required string mechanism = 1;
  optional string data = 2;
}


message AuthenticationStepMessage {
  required bytes data = 1;
}


message AuthenticationCompletedMessage {}


message AuthenticationFailedMessage {}


message AuthenticationErrorMessage {
  optional string error = 1;
}



message Archive {
  message Framework {
    required FrameworkInfo framework_info = 1;
    optional string pid = 2;
    repeated Task tasks = 3;
  }
  repeated Framework frameworks = 1;
}

message TaskHealthStatus {
  required TaskID task_id = 1;

  required bool healthy = 2;

    optional bool kill_task = 3 [default = false];

      optional int32 consecutive_failures = 4;
}
